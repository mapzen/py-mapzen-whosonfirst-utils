#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import geojson

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.placetypes

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Where to write concordances (default is STDOUT)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    source = os.path.abspath(options.source)
    crawl = mapzen.whosonfirst.utils.crawl(source)

    fh = sys.stdout

    if options.csv:
        path = os.path.abspath(options.csv)
        fh = open(path, 'w')

    writer = None

    # sudo make me a function or something...
    # (20150715/thisisaaronland)

    common = mapzen.whosonfirst.placetypes.common()
    common_opt = mapzen.whosonfirst.placetypes.common_optional()

    placetypes = common
    placetypes.append("county")

    # placetypes.extend(common_opt)

    for path in crawl:

        try:
            data_fh = open(path, 'r')
            data = geojson.load(data_fh)
        except Exception, e:
            logging.error("failed to process %s, because %s" % (path, e))
            continue

        props = data['properties']

        if props.get('wof:placetype', '') == 'venue':
            logging.debug("skipping venues for now")
            continue

        hierarchies = props.get('wof:hierarchy', [])

        for hier in hierarchies:

            out = {
                'id': props.get('wof:id', -1),
                # 'parent_id': props.get('wof:parent_id', -1),
                'placetype': props.get('wof:placetype', ''),
                'iso': props.get('iso:country', ''),
                }

            for pl in placetypes:
                k = "%s_id" % pl
                out[k] = hier.get(k, 0)

            if not writer:
                writer = csv.DictWriter(fh, fieldnames=out.keys())
                writer.writeheader()

            writer.writerow(out)

    sys.exit()
