#!/usr/bin/env python

# I honestly don't remember - this is being left here in case anyone is still
# using it but I have started using wof-supersede-records instead
# (20180525/thisisaaronland)

import sys
import os.path
import logging
import pprint

import mapzen.whosonfirst
import mapzen.whosonfirst.utils
import mapzen.whosonfirst.pip.utils
import mapzen.whosonfirst.placetypes
import mapzen.whosonfirst.export

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-w', '--wofid', dest='wofid', action='store', default=None, help='The WOF ID that is about to be superseded')
    opt_parser.add_option('-p', '--placetype', dest='placetype', action='store', default=None, help='Assign the newly created record to have this placetype')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    opt_parser.add_option('-n', '--dry-run', dest='dryrun', action='store_true', default=False, help='...')
    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not options.wofid:
        logging.error("Missing WOF ID")
        sys.exit()

    mapzen.whosonfirst.ensure_current(liberal=True)

    id = options.wofid

    if not id:
        logging.error("Missing WOF ID!")
        sys.exit(1)

    if options.placetype:

        if not mapzen.whosonfirst.placetypes.is_valid_placetype(options.placetype):
            logging.error("Invalid placetype!")
            sys.exit(1)

    source = os.path.abspath(options.source)
    old_feature = mapzen.whosonfirst.utils.load([source], id)

    old_feature, new_feature = mapzen.whosonfirst.utils.supersede_feature(old_feature, placetype=options.placetype)

    old_props = old_feature['properties']
    new_props = new_feature['properties']

    if old_props['wof:placetype'] != new_props['wof:placetype']:

        admin_data = options.source	# PLEASE FIX ME
        mapzen.whosonfirst.pip.utils.append_hierarchy_and_parent(new_feature, data_root=[admin_data])

        new_props = new_feature['properties']

    logging.debug(pprint.pformat(old_props))
    logging.debug(pprint.pformat(new_props))

    if options.dryrun:
        logging.info("dry run mode is enabled, so we are not actually writing anything to disk")
    else:
        exporter = mapzen.whosonfirst.export.flatfile(source)
        exporter.export_feature(old_feature)
        exporter.export_feature(new_feature)

    new_id = new_props['wof:id']

    new_path = mapzen.whosonfirst.utils.id2abspath(source, new_id)
    logging.info(new_path)

    sys.exit()
