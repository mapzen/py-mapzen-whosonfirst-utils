#!/usr/bin/env python

import sys
import logging
import os.path
import csv
import geojson

import mapzen.whosonfirst.utils

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where to read files from')
    opt_parser.add_option('-c', '--csv', dest='csv', action='store', default=None, help='Where to write concordances (default is STDOUT)')

    opt_parser.add_option('-e', '--ensure', dest='ensure', action='store_true', default=False, help='Ensure that at least one concordance exists (default is False)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    # to do: update to allow the passing of skip/ensure placetype
    # flags (20150716/thisisaaronland)

    source = os.path.abspath(options.source)
    crawl = mapzen.whosonfirst.utils.crawl(source)

    fh = sys.stdout

    if options.csv:
        path = os.path.abspath(options.csv)
        fh = open(path, 'w')

    writer = None

    for path in crawl:

        try:
            data_fh = open(path, 'r')
            data = geojson.load(data_fh)
        except Exception, e:
            logging.error("failed to process %s, because %s" % (f, e))
            continue

        props = data['properties']

        concordances = props.get('wof:concordances', {})

        if options.ensure:
            if not len(concordances.keys()):
                continue

        out = {
            'id' : props.get('wof:id', -1),
            'iso': props.get('iso:country', ''),
            'placetype': props.get('wof:placetype', ''),
            'geoplanet_id' : concordances.get('gp:id', 0),
            'geonames_id' : concordances.get('gn:id', 0),
            'quattroshapes_id' : concordances.get('qs:id', 0),
        }

        if not writer:

            writer = csv.DictWriter(fh, fieldnames=out.keys())
            writer.writeheader()

        writer.writerow(out)
